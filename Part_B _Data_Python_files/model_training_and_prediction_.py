# -*- coding: utf-8 -*-
"""Model Training and Prediction    .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AgfrA2m3gEXVD2evhf5a0XgzUHosdUg5

There are three folder named 1 ,2 ,3 in the main folder
1->represents the chronological data used for developing column 1
2->represents the chronological data used for developing column 2
3->represents the chronological data used for developing column 3

Importing Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install rasterio
#import required libraries
import rasterio
from rasterio import plot
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

"""1)We shall be using two CSV files as the number of pixels exceed the limit of single CSV file
2)We shall develop 3 columns of chornoligical data .
3)The health shall be determined based on range of NDVI values otbtained
4)Here value represents the NDVI value
5)we shall be having 4 classes
    if 0 < value < 0.2:
        sparse += 1
    elif 0.2 < value < 0.5:
        moderate += 1
    elif value >= 0.5:
        healthy += 1
    else:
        unhealthy += 1

The date and folder is specified beside each of the images imported

Developing column 1 in our CSV file
"""

band1=rasterio.open('/content/2_1_1.TIF') #blue //component1>>flight session 2 >> 22-06-08 >>100FPLAN >> DJI 0010
band2=rasterio.open('/content/2_1_2.TIF') #green
band3 = rasterio.open('/content/2_1_3.TIF') #red
band5 = rasterio.open('/content/2_1_5.TIF') #nir

#type of raster byte
band3.dtypes[0]
#raster sytem of reference
band3.crs
#raster transform parameters
band3.transform
#raster values as matrix array
band3.read(1)
#multiple band representation
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))


plot.show(band3, ax=ax1, cmap='Blues') #red
plot.show(band5, ax=ax2, cmap='Blues') #nir
fig.tight_layout()
#generate nir and red objects as arrays in float64 format
red = band3.read(1).astype('float64')
nir = band5.read(1).astype('float64')

nir

#type of raster byte
band1.dtypes[0]
#raster sytem of reference
band1.crs
#raster transform parameters
band3.transform
#raster values as matrix array
band1.read(1)
#multiple band representation
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))


plot.show(band1, ax=ax1, cmap='Blues') #blue
plot.show(band2, ax=ax2, cmap='Blues') #green
fig.tight_layout()
#generate nir and red objects as arrays in float64 format
blue = band1.read(1).astype('float64')
green = band2.read(1).astype('float64')

green


#ndvi calculation, empty cells or nodata cells are reported as 0
ndvi1=np.where(
    (nir+red)==0.,
    0,
    (nir-red)/(nir+red))
ndvi1[:5,:5]  #this only prints first 5 rows and first 5 columns

import os

output_directory = '../Output/'
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

import rasterio
import matplotlib.pyplot as plt
import os

# Assuming you have already calculated the NDVI and have the variables 'ndvi' and 'band4' available

# Create the output directory if it doesn't exist
output_directory = '../Output/'
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Export NDVI image
ndviImage = rasterio.open(output_directory + 'ndviImage.tiff', 'w', driver='Gtiff',
                          width=band3.width,
                          height=band3.height,
                          count=1, crs=band3.crs,
                          transform=band3.transform,
                          dtype='float64')
ndviImage.write(ndvi1, 1)
ndviImage.close()

# Plot NDVI
ndvi_data = rasterio.open(output_directory + 'ndviImage.tiff')
fig = plt.figure(figsize=(18, 12))
plt.imshow(ndvi_data.read(1), cmap='viridis')  # Assuming NDVI is in band 1
plt.title('NDVI Image')
plt.colorbar(label='NDVI Value')
plt.show()
plt.savefig('/ndvi_plot.png')
plt.savefig('/content/ndvi1.png')

"""Developing column 2"""

band1=rasterio.open('/content/3_1_1.TIF') #blue  //component1 part 3-4>>flight session3>>2022-06-21>>100FPLAN
band2=rasterio.open('/content/3_1_2.TIF') #green
band3 = rasterio.open('/content/3_1_3.TIF') #red
band5 = rasterio.open('/content/3_1_5.TIF') #nir

#type of raster byte
band3.dtypes[0]
#raster sytem of reference
band3.crs
#raster transform parameters
band3.transform
#raster values as matrix array
band3.read(1)
#multiple band representation
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))


plot.show(band3, ax=ax1, cmap='Blues') #red
plot.show(band5, ax=ax2, cmap='Blues') #nir
fig.tight_layout()
#generate nir and red objects as arrays in float64 format
red = band3.read(1).astype('float64')
nir = band5.read(1).astype('float64')

nir

#type of raster byte
band1.dtypes[0]
#raster sytem of reference
band1.crs
#raster transform parameters
band3.transform
#raster values as matrix array
band1.read(1)
#multiple band representation
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))


plot.show(band1, ax=ax1, cmap='Blues') #blue
plot.show(band2, ax=ax2, cmap='Blues') #green
fig.tight_layout()
#generate nir and red objects as arrays in float64 format
blue = band1.read(1).astype('float64')
green = band2.read(1).astype('float64')

green


#ndvi calculation, empty cells or nodata cells are reported as 0
ndvi2=np.where(
    (nir+red)==0.,
    0,
    (nir-red)/(nir+red))
ndvi2[:5,:5]  #this only prints first 5 rows and first 5 columns

import os

output_directory = '../Output/'
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

import rasterio
import matplotlib.pyplot as plt
import os

# Assuming you have already calculated the NDVI and have the variables 'ndvi' and 'band4' available

# Create the output directory if it doesn't exist
output_directory = '../Output/'
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Export NDVI image
ndviImage = rasterio.open(output_directory + 'ndviImage.tiff', 'w', driver='Gtiff',
                          width=band3.width,
                          height=band3.height,
                          count=1, crs=band3.crs,
                          transform=band3.transform,
                          dtype='float64')
ndviImage.write(ndvi2, 1)
ndviImage.close()

# Plot NDVI
ndvi_data = rasterio.open(output_directory + 'ndviImage.tiff')
fig = plt.figure(figsize=(18, 12))
plt.imshow(ndvi_data.read(1), cmap='viridis')  # Assuming NDVI is in band 1
plt.title('NDVI Image')
plt.colorbar(label='NDVI Value')
plt.show()
plt.savefig('/ndvi_plot.png')
plt.savefig('/content/ndvi2.png')

"""Developing Column 3"""

band1=rasterio.open('/content/4_1_1.TIF') #blue //component 1 part 3-4 >>flight sess 4>> 2022-7-11>>100FPLAN
band2=rasterio.open('/content/4_1_2.TIF') #green
band3 = rasterio.open('/content/4_1_3.TIF') #red
band5 = rasterio.open('/content/4_1_5.TIF') #nir

#type of raster byte
band3.dtypes[0]
#raster sytem of reference
band3.crs
#raster transform parameters
band3.transform
#raster values as matrix array
band3.read(1)
#multiple band representation
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))


plot.show(band3, ax=ax1, cmap='Blues') #red
plot.show(band5, ax=ax2, cmap='Blues') #nir
fig.tight_layout()
#generate nir and red objects as arrays in float64 format
red = band3.read(1).astype('float64')
nir = band5.read(1).astype('float64')

nir

#type of raster byte
band1.dtypes[0]
#raster sytem of reference
band1.crs
#raster transform parameters
band3.transform
#raster values as matrix array
band1.read(1)
#multiple band representation
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))


plot.show(band1, ax=ax1, cmap='Blues') #blue
plot.show(band2, ax=ax2, cmap='Blues') #green
fig.tight_layout()
#generate nir and red objects as arrays in float64 format
blue = band1.read(1).astype('float64')
green = band2.read(1).astype('float64')

green


#ndvi calculation, empty cells or nodata cells are reported as 0
ndvi3=np.where(
    (nir+red)==0.,
    0,
    (nir-red)/(nir+red))
ndvi3[:5,:5]  #this only prints first 5 rows and first 5 columns

import os

output_directory = '../Output/'
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

import rasterio
import matplotlib.pyplot as plt
import os

# Assuming you have already calculated the NDVI and have the variables 'ndvi' and 'band4' available

# Create the output directory if it doesn't exist
output_directory = '../Output/'
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Export NDVI image
ndviImage = rasterio.open(output_directory + 'ndviImage.tiff', 'w', driver='Gtiff',
                          width=band3.width,
                          height=band3.height,
                          count=1, crs=band3.crs,
                          transform=band3.transform,
                          dtype='float64')
ndviImage.write(ndvi3, 1)
ndviImage.close()

# Plot NDVI
ndvi_data = rasterio.open(output_directory + 'ndviImage.tiff')
fig = plt.figure(figsize=(18, 12))
plt.imshow(ndvi_data.read(1), cmap='viridis')  # Assuming NDVI is in band 1
plt.title('NDVI Image')
plt.colorbar(label='NDVI Value')
plt.show()
plt.savefig('/ndvi_plot.png')
plt.savefig('/content/ndvi3.png')

"""The training and testing data has ben developed

Moving on to the Model development
"""

import pandas as pd
import numpy as np

# Assuming 'ndvi1', 'ndvi2', and 'ndvi3' are your multidimensional NDVI arrays
# Modify these arrays with your actual data

# Flatten the arrays
ndvi1_flat = ndvi1.flatten()
ndvi2_flat = ndvi2.flatten()
ndvi3_flat = ndvi3.flatten()

# Split your data into two parts
split_index = len(ndvi1_flat) // 2

# Create dictionaries with columns for each part
ndvi_data_part1 = {'NDVI1': ndvi1_flat[:split_index], 'NDVI2': ndvi2_flat[:split_index], 'NDVI3': ndvi3_flat[:split_index]}
ndvi_data_part2 = {'NDVI1': ndvi1_flat[split_index:], 'NDVI2': ndvi2_flat[split_index:], 'NDVI3': ndvi3_flat[split_index:]}

# Create DataFrames for each part
df_part1 = pd.DataFrame(ndvi_data_part1)
df_part2 = pd.DataFrame(ndvi_data_part2)

# Define the paths to the CSV files where you want to save the data
csv_file_path_part1 = 'ndvi_values_part1.csv'
csv_file_path_part2 = 'ndvi_values_part2.csv'

# Save each DataFrame to a separate CSV file
df_part1.to_csv(csv_file_path_part1, index=False)
df_part2.to_csv(csv_file_path_part2, index=False)

"""Model has been developed

Proceed to prediction of values
"""

import pandas as pd
import numpy as np

# Load the CSV files for three consecutive days (replace with your file paths)
data_day1 = pd.read_csv('/content/ndvi_values_part1.csv')
data_day2 = pd.read_csv('/content/ndvi_values_part2.csv')

# Combine the data from both days
data_combined = pd.concat([data_day1, data_day2], axis=0, ignore_index=True)

# Extract input features (NDVI1, NDVI2, NDVI3) and target variable (NDVI4)
X = data_combined[['NDVI1', 'NDVI2', 'NDVI3']].values
y = data_combined['NDVI3'].values

# Train a predictive model (e.g., RandomForestRegressor)
from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X, y)

# Make predictions for NDVI4 based on NDVI1, NDVI2, and NDVI3
y_pred = model.predict(X)

# Initialize counters for different NDVI ranges
sparse = 0
moderate = 0
healthy = 0
unhealthy = 0

# Iterate through predicted values and count them in different ranges
for value in y_pred:
    if 0 < value < 0.2:
        sparse += 1
    elif 0.2 < value < 0.5:
        moderate += 1
    elif value >= 0.5:
        healthy += 1
    else:
        unhealthy += 1

# Print the counts for each NDVI range
print(f'Number of values in different NDVI ranges:')
print(f'Sparse: {sparse}')
print(f'Moderate: {moderate}')
print(f'Healthy: {healthy}')
print(f'Unhealthy: {unhealthy}')

"""Determning the percentages of the cover"""

total_values = len(y_pred)

# Calculate the percentage for each NDVI range
percentage_sparse = (sparse / total_values) * 100
percentage_moderate = (moderate / total_values) * 100
percentage_healthy = (healthy / total_values) * 100
percentage_unhealthy = (unhealthy / total_values) * 100

# Print the percentages
print(f'Percentage of values in different NDVI ranges:')
print(f'Sparse: {percentage_sparse:.2f}%')
print(f'Moderate: {percentage_moderate:.2f}%')
print(f'Healthy: {percentage_healthy:.2f}%')
print(f'Unhealthy: {percentage_unhealthy:.2f}%')

"""Percentages of cover for column 1"""

import pandas as pd

sparse = 0
moderate = 0
healthy = 0
unhealthy = 0

# Read the first CSV file into a DataFrame
df1 = pd.read_csv('/content/ndvi_values_part1.csv')  # Replace 'file1.csv' with the path to your first CSV file

# Read the second CSV file into another DataFrame
df2 = pd.read_csv('/content/ndvi_values_part2.csv')  # Replace 'file2.csv' with the path to your second CSV file

combined_df = pd.concat([df1, df2], ignore_index=True)
column_length = len(combined_df['NDVI1'])

# Loop through the values in the 'NDVI1' column for both DataFrames
for value in combined_df['NDVI1']:
    # Your 'if' condition here
    if 0 < value < 0.2:
        sparse += 1
    elif 0.2 < value < 0.5:
        moderate += 1
    elif value >= 0.5:
        healthy += 1
    else:
        unhealthy += 1

# Print the counts for each NDVI range
# print(f'Number of values in different NDVI ranges:')
# print(f'Sparse: {sparse}')
# print(f'Moderate: {moderate}')
# print(f'Healthy: {healthy}')
# print(f'Unhealthy: {unhealthy}')

total_values = column_length
percentage_sparse = (sparse / total_values) * 100
percentage_moderate = (moderate / total_values) * 100
percentage_healthy = (healthy / total_values) * 100
percentage_unhealthy = (unhealthy / total_values) * 100


# Print the percentages
print(f'Percentage of values in different NDVI ranges:')
print(f'Sparse: {percentage_sparse:.2f}%')
print(f'Moderate: {percentage_moderate:.2f}%')
print(f'Healthy: {percentage_healthy:.2f}%')
print(f'Unhealthy: {percentage_unhealthy:.2f}%')

"""Percentages of cover for column 2"""

import pandas as pd

sparse = 0
moderate = 0
healthy = 0
unhealthy = 0

# Read the first CSV file into a DataFrame
df1 = pd.read_csv('/content/ndvi_values_part1.csv')  # Replace 'file1.csv' with the path to your first CSV file

# Read the second CSV file into another DataFrame
df2 = pd.read_csv('/content/ndvi_values_part2.csv')  # Replace 'file2.csv' with the path to your second CSV file

combined_df = pd.concat([df1, df2], ignore_index=True)
column_length = len(combined_df['NDVI2'])

# Loop through the values in the 'NDVI1' column for both DataFrames
for value in combined_df['NDVI2']:
    # Your 'if' condition here
    if 0 < value < 0.2:
        sparse += 1
    elif 0.2 < value < 0.5:
        moderate += 1
    elif value >= 0.5:
        healthy += 1
    else:
        unhealthy += 1

# Print the counts for each NDVI range
# print(f'Number of values in different NDVI ranges:')
# print(f'Sparse: {sparse}')
# print(f'Moderate: {moderate}')
# print(f'Healthy: {healthy}')
# print(f'Unhealthy: {unhealthy}')

total_values = column_length
percentage_sparse = (sparse / total_values) * 100
percentage_moderate = (moderate / total_values) * 100
percentage_healthy = (healthy / total_values) * 100
percentage_unhealthy = (unhealthy / total_values) * 100


# Print the percentages
print(f'Percentage of values in different NDVI ranges:')
print(f'Sparse: {percentage_sparse:.2f}%')
print(f'Moderate: {percentage_moderate:.2f}%')
print(f'Healthy: {percentage_healthy:.2f}%')
print(f'Unhealthy: {percentage_unhealthy:.2f}%')

"""Percentages of cover for column 3



"""

import pandas as pd

sparse = 0
moderate = 0
healthy = 0
unhealthy = 0

# Read the first CSV file into a DataFrame
df1 = pd.read_csv('/content/ndvi_values_part1.csv')  # Replace 'file1.csv' with the path to your first CSV file

# Read the second CSV file into another DataFrame
df2 = pd.read_csv('/content/ndvi_values_part2.csv')  # Replace 'file2.csv' with the path to your second CSV file

combined_df = pd.concat([df1, df2], ignore_index=True)
column_length = len(combined_df['NDVI3'])

# Loop through the values in the 'NDVI1' column for both DataFrames
for value in combined_df['NDVI3']:
    # Your 'if' condition here
    if 0 < value < 0.2:
        sparse += 1
    elif 0.2 < value < 0.5:
        moderate += 1
    elif value >= 0.5:
        healthy += 1
    else:
        unhealthy += 1

# Print the counts for each NDVI range
# print(f'Number of values in different NDVI ranges:')
# print(f'Sparse: {sparse}')
# print(f'Moderate: {moderate}')
# print(f'Healthy: {healthy}')
# print(f'Unhealthy: {unhealthy}')

total_values = column_length
percentage_sparse = (sparse / total_values) * 100
percentage_moderate = (moderate / total_values) * 100
percentage_healthy = (healthy / total_values) * 100
percentage_unhealthy = (unhealthy / total_values) * 100


# Print the percentages
print(f'Percentage of values in different NDVI ranges:')
print(f'Sparse: {percentage_sparse:.2f}%')
print(f'Moderate: {percentage_moderate:.2f}%')
print(f'Healthy: {percentage_healthy:.2f}%')
print(f'Unhealthy: {percentage_unhealthy:.2f}%')

"""Displaying the Output"""

from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt

image1 = Image.open("/content/2_1_0.JPG")  #POVIDE INPUT IMAGES HERE
image2 = Image.open("/content/3_1_0.JPG")
image3 = Image.open("/content/4_1_0.JPG")

font_path = "/content/K22 Eclair.ttf"  #DOWNLOAD FONT, THEN PROVIDE THE .TTF FILE(AFTER EXTRACTION) LOCATION HERE FROM COLLAB
font_size = 50  #ADJUST

# Load the font with the specified size
font = ImageFont.truetype(font_path, font_size)

# Get the dimensions of the input images
image_width, image_height = image1.size

combined_width = image_width * 4  # (Three+1) (images+PREDICTED) side by side ,SO CHANGE THIS ACCORDING TO IMAGES
combined_height = image_height + 300  # Adjust for labels ,CHANGE THIS +ENTITIY AS YOU ADD FURTHER DETAILS

# Create a new image to combine the three images
combined_image = Image.new("RGB", (combined_width, combined_height), "white")
draw = ImageDraw.Draw(combined_image)

# Create data labels for each image
labels1 = ["Date", "Healthy", "Unhealthy", "Moderate","Sparse"]  #INCREASE DECREASE AS YOU WANT
labels2 = ["Date", "Healthy", "Unhealthy", "Moderate","Sparse"]
labels3 = ["Date", "Healthy", "Unhealthy", "Moderate","Sparse"]
labels4 = ["Predicted" ,"Future Date", "Healthy", "Unhealthy", "Moderate","Sparse"]  #THIS IS THE FINAL PREDICTED VALUE

# Paste the three images side by side onto the combined image
combined_image.paste(image1, (0, 0))
combined_image.paste(image2, (image_width, 0))
combined_image.paste(image3, (image_width * 2, 0))

label_x = 10

for i in range(5): #5 IS DUE TO LABELS
    label_y1 = image_height + 30 + i * 50
    label_y2 = label_y1 + image_height + 30
    label_y3 = label_y2 + image_height + 30

    draw.text((label_x, label_y1), labels1[i], fill="black", font=font)
    draw.text((label_x + image_width, label_y1), labels2[i], fill="black", font=font)
    draw.text((label_x + 2 * image_width, label_y1), labels3[i], fill="black", font=font)

font_size = 50
font = ImageFont.truetype(font_path, font_size)
for i in range(5): #5 IS DUE TO LABELS
  label_y1 = image_height/2 + 30 + i * 50
  draw.text((label_x + 3 * image_width+100, label_y1), labels4[i], fill="black", font=font) #WHENEVER YOU ADD A LABEL, ALWAYS ADD THIS PART


# Save the combined image
combined_image.save("combined_image.jpg")

# Show or display the combined image using matplotlib
plt.imshow(combined_image)
plt.axis('off')
plt.show()




# Save the combined image with a larger size
combined_image_large_path = "combined_image_large.jpg"
combined_image_large = combined_image.resize((combined_width * 2, combined_height * 2), Image.ANTIALIAS)
combined_image_large.save(combined_image_large_path)

# Provide a download link for the larger image
from IPython.display import FileLink
display(FileLink(combined_image_large_path))





# Display the combined image in a larger size
plt.figure(figsize=(15, 7))
plt.imshow(combined_image_large)
plt.axis('off')
plt.show()

"""END"""